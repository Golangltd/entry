/// <reference path="core.d.ts" />
declare namespace serialport {
	interface QSerialPort_ITF extends core.QIODevice_ITF {
		QSerialPort_PTR():QSerialPort;
	}

	class QSerialPort extends core.QIODevice {
		___pointer: number;
		QSerialPort_PTR():QSerialPort;
		Pointer():number;
		SetPointer(p:number):void;
		AtEndDefault():boolean;
		BaudRate(directions:number):number;
		ConnectBaudRateChanged(f:(baudRate:number,directions:number)=>void):void;
		DisconnectBaudRateChanged():void;
		BaudRateChanged(baudRate:number,directions:number):void;
		ConnectBreakEnabledChanged(f:(set:boolean)=>void):void;
		DisconnectBreakEnabledChanged():void;
		BreakEnabledChanged(set:boolean):void;
		BytesAvailableDefault():number;
		BytesToWriteDefault():number;
		CanReadLineDefault():boolean;
		Clear(directions:number):boolean;
		ClearError():void;
		CloseDefault():void;
		DataBits():number;
		ConnectDataBitsChanged(f:(dataBits:number)=>void):void;
		DisconnectDataBitsChanged():void;
		DataBitsChanged(dataBits:number):void;
		ConnectDataTerminalReadyChanged(f:(set:boolean)=>void):void;
		DisconnectDataTerminalReadyChanged():void;
		DataTerminalReadyChanged(set:boolean):void;
		Error():number;
		ConnectErrorOccurred(f:(error:number)=>void):void;
		DisconnectErrorOccurred():void;
		ErrorOccurred(error:number):void;
		FlowControl():number;
		ConnectFlowControlChanged(f:(flow:number)=>void):void;
		DisconnectFlowControlChanged():void;
		FlowControlChanged(flow:number):void;
		Flush():boolean;
		IsBreakEnabled():boolean;
		IsDataTerminalReady():boolean;
		IsRequestToSend():boolean;
		IsSequentialDefault():boolean;
		OpenDefault(mode:number):boolean;
		Parity():number;
		ConnectParityChanged(f:(parity:number)=>void):void;
		DisconnectParityChanged():void;
		ParityChanged(parity:number):void;
		PinoutSignals():number;
		PortName():string;
		ReadBufferSize():number;
		ConnectReadData(f:(data:string,maxSize:number)=>number):void;
		DisconnectReadData():void;
		ReadData(data:string,maxSize:number):number;
		ReadDataDefault(data:string,maxSize:number):number;
		ReadLineDataDefault(data:string,maxSize:number):number;
		ConnectRequestToSendChanged(f:(set:boolean)=>void):void;
		DisconnectRequestToSendChanged():void;
		RequestToSendChanged(set:boolean):void;
		SendBreak(duration:number):boolean;
		SetBaudRate(baudRate:number,directions:number):boolean;
		SetBreakEnabled(set:boolean):boolean;
		SetDataBits(dataBits:number):boolean;
		SetDataTerminalReady(set:boolean):boolean;
		SetFlowControl(flowControl:number):boolean;
		SetParity(parity:number):boolean;
		SetPort(serialPortInfo:QSerialPortInfo_ITF):void;
		SetPortName(name:string):void;
		SetReadBufferSize(size:number):void;
		SetRequestToSend(set:boolean):boolean;
		SetSettingsRestoredOnClose(restore:boolean):void;
		SetStopBits(stopBits:number):boolean;
		SettingsRestoredOnClose():boolean;
		StopBits():number;
		ConnectStopBitsChanged(f:(stopBits:number)=>void):void;
		DisconnectStopBitsChanged():void;
		StopBitsChanged(stopBits:number):void;
		WaitForBytesWrittenDefault(msecs:number):boolean;
		WaitForReadyReadDefault(msecs:number):boolean;
		ConnectWriteData(f:(data:string,maxSize:number)=>number):void;
		DisconnectWriteData():void;
		WriteData(data:string,maxSize:number):number;
		WriteDataDefault(data:string,maxSize:number):number;
		ConnectDestroyQSerialPort(f:()=>void):void;
		DisconnectDestroyQSerialPort():void;
		DestroyQSerialPort():void;
		DestroyQSerialPortDefault():void;
		PosDefault():number;
		ResetDefault():boolean;
		SeekDefault(pos:number):boolean;
		SizeDefault():number;
		ChildEventDefault(event:core.QChildEvent_ITF):void;
		ConnectNotifyDefault(sign:core.QMetaMethod_ITF):void;
		CustomEventDefault(event:core.QEvent_ITF):void;
		DeleteLaterDefault():void;
		DisconnectNotifyDefault(sign:core.QMetaMethod_ITF):void;
		EventDefault(e:core.QEvent_ITF):boolean;
		EventFilterDefault(watched:core.QObject_ITF,event:core.QEvent_ITF):boolean;
		MetaObjectDefault():core.QMetaObject;
		TimerEventDefault(event:core.QTimerEvent_ITF):void;
	}
	function NewQSerialPortFromPointer(ptr:number):QSerialPort;
	function NewQSerialPort(parent:core.QObject_ITF):QSerialPort;
	function NewQSerialPort2(name:string,parent:core.QObject_ITF):QSerialPort;
	function NewQSerialPort3(serialPortInfo:QSerialPortInfo_ITF,parent:core.QObject_ITF):QSerialPort;
	function NewQSerialPortInfo():QSerialPortInfo;
	function NewQSerialPortInfo2(port:QSerialPort_ITF):QSerialPortInfo;
	function NewQSerialPortInfo3(name:string):QSerialPortInfo;
	function NewQSerialPortInfo4(other:QSerialPortInfo_ITF):QSerialPortInfo;
	const QSerialPort__Input: number;
	const QSerialPort__Output: number;
	const QSerialPort__AllDirections: number;
	const QSerialPort__Baud1200: number;
	const QSerialPort__Baud2400: number;
	const QSerialPort__Baud4800: number;
	const QSerialPort__Baud9600: number;
	const QSerialPort__Baud19200: number;
	const QSerialPort__Baud38400: number;
	const QSerialPort__Baud57600: number;
	const QSerialPort__Baud115200: number;
	const QSerialPort__UnknownBaud: number;
	const QSerialPort__Data5: number;
	const QSerialPort__Data6: number;
	const QSerialPort__Data7: number;
	const QSerialPort__Data8: number;
	const QSerialPort__UnknownDataBits: number;
	const QSerialPort__NoParity: number;
	const QSerialPort__EvenParity: number;
	const QSerialPort__OddParity: number;
	const QSerialPort__SpaceParity: number;
	const QSerialPort__MarkParity: number;
	const QSerialPort__UnknownParity: number;
	const QSerialPort__OneStop: number;
	const QSerialPort__OneAndHalfStop: number;
	const QSerialPort__TwoStop: number;
	const QSerialPort__UnknownStopBits: number;
	const QSerialPort__NoFlowControl: number;
	const QSerialPort__HardwareControl: number;
	const QSerialPort__SoftwareControl: number;
	const QSerialPort__UnknownFlowControl: number;
	const QSerialPort__NoSignal: number;
	const QSerialPort__TransmittedDataSignal: number;
	const QSerialPort__ReceivedDataSignal: number;
	const QSerialPort__DataTerminalReadySignal: number;
	const QSerialPort__DataCarrierDetectSignal: number;
	const QSerialPort__DataSetReadySignal: number;
	const QSerialPort__RingIndicatorSignal: number;
	const QSerialPort__RequestToSendSignal: number;
	const QSerialPort__ClearToSendSignal: number;
	const QSerialPort__SecondaryTransmittedDataSignal: number;
	const QSerialPort__SecondaryReceivedDataSignal: number;
	const QSerialPort__NoError: number;
	const QSerialPort__DeviceNotFoundError: number;
	const QSerialPort__PermissionError: number;
	const QSerialPort__OpenError: number;
	const QSerialPort__ParityError: number;
	const QSerialPort__FramingError: number;
	const QSerialPort__BreakConditionError: number;
	const QSerialPort__WriteError: number;
	const QSerialPort__ReadError: number;
	const QSerialPort__ResourceError: number;
	const QSerialPort__UnsupportedOperationError: number;
	const QSerialPort__UnknownError: number;
	const QSerialPort__TimeoutError: number;
	const QSerialPort__NotOpenError: number;
	interface QSerialPortInfo_ITF {
		QSerialPortInfo_PTR():QSerialPortInfo;
	}

	class QSerialPortInfo {
		___pointer: number;
		QSerialPortInfo_PTR():QSerialPortInfo;
		Pointer():number;
		SetPointer(p:number):void;
		AvailablePorts():QSerialPortInfo[];
		Description():string;
		HasProductIdentifier():boolean;
		HasVendorIdentifier():boolean;
		IsBusy():boolean;
		IsNull():boolean;
		Manufacturer():string;
		PortName():string;
		ProductIdentifier():number;
		SerialNumber():string;
		StandardBaudRates():number[];
		Swap(other:QSerialPortInfo_ITF):void;
		SystemLocation():string;
		VendorIdentifier():number;
		DestroyQSerialPortInfo():void;
	}
	function NewQSerialPortInfoFromPointer(ptr:number):QSerialPortInfo;
	function NewQSerialPortInfo():QSerialPortInfo;
	function NewQSerialPortInfo2(port:QSerialPort_ITF):QSerialPortInfo;
	function NewQSerialPortInfo3(name:string):QSerialPortInfo;
	function NewQSerialPortInfo4(other:QSerialPortInfo_ITF):QSerialPortInfo;
	function QSerialPortInfo_AvailablePorts():QSerialPortInfo[];
	function QSerialPortInfo_StandardBaudRates():number[];
}